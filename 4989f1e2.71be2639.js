(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{66:function(n,e,t){"use strict";t.r(e),t.d(e,"frontMatter",(function(){return i})),t.d(e,"metadata",(function(){return o})),t.d(e,"rightToc",(function(){return s})),t.d(e,"default",(function(){return d}));var r=t(2),l=t(6),a=(t(0),t(97)),c=["components"],i={},o={permalink:"/blog/2020/03/30/\u7b97\u6cd5",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/blog/blog/2020-03-30-\u7b97\u6cd5.md",source:"@site/blog/2020-03-30-\u7b97\u6cd5.md",description:"--\x3e",date:"2020-03-30T00:00:00.000Z",tags:[],title:"\u7b97\u6cd5",readingTime:11.43,truncated:!1},s=[{value:"\u4e24\u6570\u4e4b\u548c",id:"\u4e24\u6570\u4e4b\u548c",children:[{value:"\u4e24\u6570\u76f8\u52a0",id:"\u4e24\u6570\u76f8\u52a0",children:[]},{value:"Z\u5f62\u53d8\u6362",id:"z\u5f62\u53d8\u6362",children:[]},{value:"\u6574\u6570\u53cd\u8f6c",id:"\u6574\u6570\u53cd\u8f6c",children:[]},{value:"\u76db\u6c34\u7684\u5bb9\u5668",id:"\u76db\u6c34\u7684\u5bb9\u5668",children:[]},{value:"\u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2c N \u4e2a\u7ed3\u70b9",id:"\u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2c-n-\u4e2a\u7ed3\u70b9",children:[]},{value:"\u6709\u6548\u7684\u62ec\u53f7",id:"\u6709\u6548\u7684\u62ec\u53f7",children:[]},{value:"\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868",id:"\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868",children:[]},{value:"\u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20 II",id:"\u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20-ii",children:[]}]}],u={rightToc:s};function d(n){var e=n.components,t=Object(l.a)(n,c);return Object(a.b)("wrapper",Object(r.a)({},u,t,{components:e,mdxType:"MDXLayout"}),Object(a.b)("h2",{id:"\u4e24\u6570\u4e4b\u548c"},"\u4e24\u6570\u4e4b\u548c"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-js"},"/*\n * @lc app=leetcode.cn id=1 lang=javascript\n *\n * [1] \u4e24\u6570\u4e4b\u548c\n */\n\n// @lc code=start\n/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function (nums, target) {\n  let result = {};\n  for (let index = 0; index < nums.length; index++) {\n    let diff = target - nums[index];\n    if(Object.keys(result).includes(String(diff))) {\n        return [result[diff], index]\n    } \n    result[nums[index]] = index\n  }\n};\n// @lc code=end\n")),Object(a.b)("h3",{id:"\u4e24\u6570\u76f8\u52a0"},"\u4e24\u6570\u76f8\u52a0"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-js"},"/*\n * @lc app=leetcode.cn id=2 lang=javascript\n *\n * [2] \u4e24\u6570\u76f8\u52a0\n */\n\n// @lc code=start\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */\nvar addTwoNumbers = function(l1, l2) {\n    let head = null, tail = null;\n    let carry = 0;\n    while(l1 || l2) {\n        const n1 = l1 ? l1.val : 0;\n        const n2 = l2 ? l2.val : 0;\n        const sum = n1 + n2 + carry;\n        console.log(sum, n1, n2, l1, l2)\n        if(!head) {\n            head  = tail = new ListNode(sum % 10)\n        } else {\n            tail.next = new ListNode(sum % 10);\n            tail = tail.next;\n        }\n        carry = Math.floor(sum / 10);\n        if(l1) {\n            l1 = l1.next\n        }\n        if(l2) {\n            l2 = l2.next\n        }\n        if(carry > 0) {\n            tail.next = new ListNode(carry)\n        }\n    }\n    return head\n};\n// @lc code=end\n\n")),Object(a.b)("h3",{id:"z\u5f62\u53d8\u6362"},"Z\u5f62\u53d8\u6362"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-js"},"/*\n * @lc app=leetcode.cn id=6 lang=javascript\n *\n * [6] Z \u5b57\u5f62\u53d8\u6362\n */\n\n// @lc code=start\n/**\n * @param {string} s\n * @param {number} numRows\n * @return {string}\n */\nvar convert = function(s, numRows) {\n    let isdown = false;\n    let temp = [];\n    let step = 0;\n    if(numRows === 1) return s;\n    for(let i = 0; i< s.length; i++) temp[i] = '';\n    for(let index = 0; index < s.length; index++) {\n        temp[step] += s[index];\n        if(step === 0 || step === numRows -1) {\n            isdown = !isdown\n        }\n        step += isdown ? 1 : -1;\n    }\n    return temp.join('')\n};\n// @lc code=end\n\n\n")),Object(a.b)("h3",{id:"\u6574\u6570\u53cd\u8f6c"},"\u6574\u6570\u53cd\u8f6c"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-js"},"/*\n * @lc app=leetcode.cn id=7 lang=javascript\n *\n * [7] \u6574\u6570\u53cd\u8f6c\n */\n\n// @lc code=start\n/**\n * @param {number} x\n * @return {number}\n */\nvar reverse = function(x) {\n    return String(x).split('').reverse().join('')\n};\n// @lc code=end\n")),Object(a.b)("h3",{id:"\u76db\u6c34\u7684\u5bb9\u5668"},"\u76db\u6c34\u7684\u5bb9\u5668"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-js"},"/*\n * @lc app=leetcode.cn id=11 lang=javascript\n *\n * [11] \u76db\u6700\u591a\u6c34\u7684\u5bb9\u5668\n */\n\n// @lc code=start\n/**\n * @param {number[]} height\n * @return {number}\n */\nvar maxArea = function (height) {\n  let maxAreas = 0;\n  let left = 0;\n  let right = height.length - 1;\n  while (right > left) {\n    const temp = Math.min(height[right], height[left]) * (right - left);\n    if (height[left] > height[right]) {\n      right--;\n    } else {\n      left++;\n    }\n    maxAreas = Math.max(temp, maxAreas);\n  }\n  return maxAreas;\n};\n// @lc code=end\n\n")),Object(a.b)("h3",{id:"\u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2c-n-\u4e2a\u7ed3\u70b9"},"\u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2c N \u4e2a\u7ed3\u70b9"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-js"},"/*\n * @lc app=leetcode.cn id=19 lang=javascript\n *\n * [19] \u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2c N \u4e2a\u7ed3\u70b9\n */\n\n// @lc code=start\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} n\n * @return {ListNode}\n */\n var removeNthFromEnd = function(head, n) {\n    let ele = {\n        next: head\n    }\n    let curr = ele;\n    const length = getLinkNodeLength(head);\n    if(length === 1) return head.next\n    let index = 0\n    while(!(index === (length - n)) && curr) {\n        curr = curr.next;\n        index +=1\n    }\n    curr.next = curr.next.next\n    return ele.next\n};\nconst getLinkNodeLength = (head) => {\n    let length = 0;\n    let cur = head;\n    while(cur) {\n        length+=1;\n        cur = cur.next\n    }\n    return length\n}\n// @lc code=end\n")),Object(a.b)("h3",{id:"\u6709\u6548\u7684\u62ec\u53f7"},"\u6709\u6548\u7684\u62ec\u53f7"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-js"},'/*\n * @lc app=leetcode.cn id=20 lang=javascript\n *\n * [20] \u6709\u6548\u7684\u62ec\u53f7\n */\n\n// @lc code=start\n/**\n * @param {string} s\n * @return {boolean}\n */\nvar isValid = function (s) {\n  let match = {\n    ")": "(",\n    "}": "{",\n    "]": "[",\n  };\n  let stack = [];\n  if (s.length % 2 === 1) {\n    return false;\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (!match[s[i]]) {\n      stack.push(s[i]);\n    } else {\n      if (stack[stack.length - 1] === match[s[i]]) {\n        stack.pop();\n      } else {\n        return false;\n      }\n    }\n  }\n  return stack.length === 0;\n};\n// @lc code=end\n')),Object(a.b)("h3",{id:"\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868"},"\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-js"},"/*\n * @lc app=leetcode.cn id=21 lang=javascript\n *\n * [21] \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868\n */\n\n// @lc code=start\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */\nvar mergeTwoLists = function(l1, l2) {\n    const element = new ListNode(-1);\n    let prev = element\n    while(l1!==null && l2!==null) {\n        if(l1.val <=l2.val) {\n            prev.next = l1\n            l1 = l1.next;\n        } else {\n            prev.next = l2\n            l2 = l2.next;\n        }\n        prev = prev.next\n    }\n    prev.next = l1 === null ? l2 : l1;\n    return element.next\n};\n// @lc code=end\n")),Object(a.b)("h3",{id:"\u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20-ii"},"\u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20 II"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-js"},"/*\n * @lc app=leetcode.cn id=82 lang=javascript\n *\n * [82] \u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20 II\n */\n\n// @lc code=start\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar deleteDuplicates = function (head) {\n  let ele = {\n    next: head,\n  };\n  let cache = new Set();\n  let cur = ele.next;\n  let pre = ele.next;\n  while (cur) {\n    if (cache.has(cur.val)) {\n      pre.next = cur.next;\n      cache.add(cur.val)\n    }  else {\n      cache.add(cur.val);\n    }\n    cur = cur.next\n  }\n  return ele.next;\n};\n// @lc code=end\n\n")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-js"},"/*\n * @lc app=leetcode.cn id=83 lang=javascript\n *\n * [83] \u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20\n */\n\n// @lc code=start\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar deleteDuplicates = function(head) {\n    if(!head){\n        return head\n    }\n    let current = head;\n    while(current.next) {\n        if(current.val === current.next.val) {\n            current.next = current.next.next\n        } else {\n            current = current.next\n        }\n    }\n    return head\n};\n// @lc code=end\n\n")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-js"},"/*\n * @lc app=leetcode.cn id=100 lang=javascript\n *\n * [100] \u76f8\u540c\u7684\u6811\n */\n\n// @lc code=start\n/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} p\n * @param {TreeNode} q\n * @return {boolean}\n */\nvar isSameTree = function (p, q) {\n  if (p === null && q === null) {\n    return true;\n  }\n  if (p === null || q === null) {\n    return false;\n  }\n  if (p.val !== q.val) {\n    return false;\n  }\n  return isSameTree(p.left, q.left) && isSameTree(p.right, q.right);\n};\n// @lc code=end\n\n")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-js"},"/*\n * @lc app=leetcode.cn id=121 lang=javascript\n *\n * [121] \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a\n */\n\n// @lc code=start\n/**\n * @param {number[]} prices\n * @return {number}\n */\nvar maxProfit = function(prices) {\n  let max = 0;\n  let minNode = prices[0];\n  for(let i = 1; i< prices.length; i++) {\n    if(prices[i] - minNode > max) {\n        max = prices[i] - minNode;\n    } \n    if(minNode > prices[i]) {\n        minNode = prices[i]\n    }\n  }\n  return max\n};\n// @lc code=end\n\n\n")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-js"},"/*\n * @lc app=leetcode.cn id=136 lang=javascript\n *\n * [136] \u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\n */\n\n// @lc code=start\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar singleNumber = function(nums) {\n    // let cache = new Set();\n    // for(let i = 0;i < nums.length; i++) {\n    //     if(cache.has(nums[i])) {\n    //         cache.delete(nums[i])\n    //     } else {\n    //         cache.add(nums[i])\n    //     }\n    // }\n    // return cache.values().next().value;\n    let result = 0\n    for(let i = 0; i< nums.length; i++){\n        result ^=nums[i]\n    }\n    return result\n};\n// @lc code=end\n\n\n")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-js"},"/*\n * @lc app=leetcode.cn id=141 lang=javascript\n *\n * [141] \u73af\u5f62\u94fe\u8868\n */\n\n// @lc code=start\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n\n/**\n * @param {ListNode} head\n * @return {boolean}\n */\nvar hasCycle = function(head) {\n    // let cache = new Set();\n    // let curr = head;\n    // while(curr !== null) {\n    //     if(cache.has(curr)) {\n    //         return true;\n    //     } else {\n    //         cache.add(curr)\n    //     }\n    //     curr = curr.next\n\n    // }\n    // return false\n    let show = head;\n    let fast = head;\n    while(fast && fast.next) {\n        fast = fast.next.next;\n        show = show.next;\n        if(fast === show) {\n            return true;\n        }\n        \n    }\n    return false\n};\n// @lc code=end\n\n\n")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-js"},"/*\n * @lc app=leetcode.cn id=142 lang=javascript\n *\n * [142] \u73af\u5f62\u94fe\u8868 II\n */\n\n// @lc code=start\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar detectCycle = function(head) {\n    // let cache = new Set();\n    // let cur = head\n    // while(cur !== null) {\n    //    if(cache.has(cur)) {\n    //        return cur\n    //    } else {\n    //        cache.add(cur)\n    //    }\n    //     cur = cur.next\n    // }\n    // return null\n    let slow = head;\n    let fast = head;\n    let start = head;\n    while(fast && fast.next) {\n        fast = fast.next.next;\n        slow = slow.next;\n        if(fast === slow) {\n            while(start && slow){\n                if(start === slow) {\n                    return start\n                }\n                start = start.next;\n                slow = slow.next\n            }\n        }\n    }\n    return null\n};\n// @lc code=end\n")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-js"},"/*\n * @lc app=leetcode.cn id=144 lang=javascript\n *\n * [144] \u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u904d\u5386\n */\n\n// @lc code=start\n/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\nvar preorderTraversal = function(root) {\n    // \u9012\u5f52\n    // if(root) {\n    //     arr.push(root.val);\n    //     preorderTraversal(root.left, arr);\n    //     preorderTraversal(root.right, arr)\n    // }\n    // return arr\n    let stack = [];\n    let result = [];\n    let current = root;\n    while(current || stack.length > 0){\n        while(current){\n            result.push(current.val)\n            stack.push(current)\n            current = current.left\n        }\n        current = stack.pop();\n        current = current.right\n    }\n    return result\n\n};\n\n// @lc code=end\n")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-js"},"/*\n * @lc app=leetcode.cn id=169 lang=javascript\n *\n * [169] \u591a\u6570\u5143\u7d20\n */\n\n// @lc code=start\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar majorityElement = function(nums) {\n    nums.sort();\n    return nums[Math.floor(nums.length / 2 )]\n};\n// @lc code=end\n\n")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-js"},"/*\n * @lc app=leetcode.cn id=203 lang=javascript\n *\n * [203] \u79fb\u9664\u94fe\u8868\u5143\u7d20\n */\n\n// @lc code=start\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} val\n * @return {ListNode}\n */\nvar removeElements = function (head, val) {\n  let temp = {\n      next: head\n  }\n  let current = temp\n  while(current.next){\n      if(current.next.val === val) {\n          current.next = current.next.next\n      } else {\n          current = current.next\n      }   \n  }\n  return temp.next\n};\n// @lc code=end\n\n\n// let newHead = new ListNode(null);\n//     let pre = newHead;\n//     let cur = head;\n//     newHead.next = head;\n//     while(cur) {\n//         if(cur && val === cur.val){\n//             pre.next = cur.next;\n//             cur = pre.next\n//         }\n//         else {\n//             pre = cur;\n//             cur = cur.next\n//         }\n\n//     }\n//     return newHead.next\n")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-js"},"/*\n * @lc app=leetcode.cn id=206 lang=javascript\n *\n * [206] \u53cd\u8f6c\u94fe\u8868\n */\n\n// @lc code=start\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar reverseList = function (head) {\n  let pre = null;\n  let current = head;\n  while (current !== null) {\n    // let next = current.next;\n    // current.next = pre;\n    // pre = current;\n    // current = next;\n    [current.next, pre, current] = [pre, current, current.next]\n  }\n  return pre;\n};\n// @lc code=end\n\n")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-js"},"/*\n * @lc app=leetcode.cn id=226 lang=javascript\n *\n * [226] \u7ffb\u8f6c\u4e8c\u53c9\u6811\n */\n\n// @lc code=start\n/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {TreeNode}\n */\nvar invertTree = function (root) {\n  if (root === null) {\n    return root;\n  }\n  [root.left, root.right] = [invertTree(root.right), invertTree(root.left)];\n\n  return root;\n};\n// @lc code=end\n")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-js"},"/*\n * @lc app=leetcode.cn id=235 lang=javascript\n *\n * [235] \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\n */\n\n// @lc code=start\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n\n/**\n * @param {TreeNode} root\n * @param {TreeNode} p\n * @param {TreeNode} q\n * @return {TreeNode}\n */\nvar lowestCommonAncestor = function(root, p, q) {\n    while(root){\n        if(p.val > root.val && q.val > root.val){\n            root = root.right\n        } else if(p.val< root.val && q.val < root.val){\n            root = root.left\n        } else {\n            return root\n        }\n    }\n};\n// @lc code=end\n")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-js"},"/*\n * @lc app=leetcode.cn id=236 lang=javascript\n *\n * [236] \u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\n */\n\n// @lc code=start\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {TreeNode} p\n * @param {TreeNode} q\n * @return {TreeNode}\n */\nvar lowestCommonAncestor = function(root, p, q) {\n    if(root === null || root=== q || root === p){\n        return root\n    }\n    const left = lowestCommonAncestor(root.left, p, q);\n    const right = lowestCommonAncestor(root.right, p, q);\n    return !left? right : !right ? left: root\n};\n// @lc code=end\n\n\n")))}d.isMDXComponent=!0},97:function(n,e,t){"use strict";t.d(e,"a",(function(){return d})),t.d(e,"b",(function(){return h}));var r=t(0),l=t.n(r);function a(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function c(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function i(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?c(Object(t),!0).forEach((function(e){a(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function o(n,e){if(null==n)return{};var t,r,l=function(n,e){if(null==n)return{};var t,r,l={},a=Object.keys(n);for(r=0;r<a.length;r++)t=a[r],e.indexOf(t)>=0||(l[t]=n[t]);return l}(n,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(r=0;r<a.length;r++)t=a[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(l[t]=n[t])}return l}var s=l.a.createContext({}),u=function(n){var e=l.a.useContext(s),t=e;return n&&(t="function"==typeof n?n(e):i(i({},e),n)),t},d=function(n){var e=u(n.components);return l.a.createElement(s.Provider,{value:e},n.children)},p={inlineCode:"code",wrapper:function(n){var e=n.children;return l.a.createElement(l.a.Fragment,{},e)}},f=l.a.forwardRef((function(n,e){var t=n.components,r=n.mdxType,a=n.originalType,c=n.parentName,s=o(n,["components","mdxType","originalType","parentName"]),d=u(t),f=r,h=d["".concat(c,".").concat(f)]||d[f]||p[f]||a;return t?l.a.createElement(h,i(i({ref:e},s),{},{components:t})):l.a.createElement(h,i({ref:e},s))}));function h(n,e){var t=arguments,r=e&&e.mdxType;if("string"==typeof n||r){var a=t.length,c=new Array(a);c[0]=f;var i={};for(var o in e)hasOwnProperty.call(e,o)&&(i[o]=e[o]);i.originalType=n,i.mdxType="string"==typeof n?n:r,c[1]=i;for(var s=2;s<a;s++)c[s]=t[s];return l.a.createElement.apply(null,c)}return l.a.createElement.apply(null,t)}f.displayName="MDXCreateElement"}}]);